name: Build IUP, CD, IM with Lua (DLL)
on:
  push:
  workflow_dispatch:

env:
  LUA_VERSION: "5.4.8"
  IUP_VERSION: "3.32"
  CD_VERSION: "5.14"
  IM_VERSION: "3.15"

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            git
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            make
            tar
            wget
            sed
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-jasper
            mingw-w64-x86_64-lua

      - name: Setup Lua paths
        run: |
          mkdir -p /d/build/lua54/install/{bin,lib,include}
          
          # Check what's actually installed
          echo "=== Checking MSYS2 Lua files ==="
          ls -la /mingw64/bin/lua* || true
          ls -la /mingw64/lib/liblua* || true
          
          # Copy executables
          cp /mingw64/bin/lua.exe /d/build/lua54/install/bin/ 2>/dev/null || cp /mingw64/bin/lua54.exe /d/build/lua54/install/bin/lua.exe
          cp /mingw64/bin/luac.exe /d/build/lua54/install/bin/ 2>/dev/null || cp /mingw64/bin/luac54.exe /d/build/lua54/install/bin/luac.exe
          
          # Copy DLL with proper naming
          if [ -f /mingw64/bin/lua54.dll ]; then
            cp /mingw64/bin/lua54.dll /d/build/lua54/install/bin/
          elif [ -f /mingw64/bin/lua5.4.dll ]; then
            cp /mingw64/bin/lua5.4.dll /d/build/lua54/install/bin/lua54.dll
          elif [ -f /mingw64/bin/liblua.dll ]; then
            cp /mingw64/bin/liblua.dll /d/build/lua54/install/bin/lua54.dll
          fi
          
          # Copy import library with proper naming
          if [ -f /mingw64/lib/liblua.dll.a ]; then
            cp /mingw64/lib/liblua.dll.a /d/build/lua54/install/lib/liblua54.a
          elif [ -f /mingw64/lib/liblua.a ]; then
            cp /mingw64/lib/liblua.a /d/build/lua54/install/lib/liblua54.a
          fi
          
          # Copy headers
          cp /mingw64/include/lua*.h /d/build/lua54/install/include/
          
          echo "=== Copied Lua files ==="
          ls -la /d/build/lua54/install/bin/
          ls -la /d/build/lua54/install/lib/

      - name: Create build directory
        run: |
          mkdir -p /d/build
          cd /d/build

      - name: Check GCC version and write to gcc_version.txt
        run: |
          cd /d/build
          gcc --version > gcc_version.txt

      - name: Download Lua source
        run: |
          cd /d/build
          wget --user-agent="Wget" -O lua-${{ env.LUA_VERSION }}.tar.gz https://www.lua.org/ftp/lua-${{ env.LUA_VERSION }}.tar.gz
          tar -xzf lua-${{ env.LUA_VERSION }}.tar.gz
          mv lua-${{ env.LUA_VERSION }} lua54

      - name: Download IUP dependencies from SourceForge
        run: |
          cd /d/build
          wget --user-agent="Wget" -O zlib.tar.gz "https://sourceforge.net/projects/iup/files/${{ env.IUP_VERSION }}/Docs%20and%20Sources/zlib-1.2.11_Sources.tar.gz/download"
          wget --user-agent="Wget" -O freetype.tar.gz "https://sourceforge.net/projects/iup/files/${{ env.IUP_VERSION }}/Docs%20and%20Sources/freetype-2.10.2_Sources.tar.gz/download"
          wget --user-agent="Wget" -O ftgl.tar.gz "https://sourceforge.net/projects/iup/files/${{ env.IUP_VERSION }}/Docs%20and%20Sources/ftgl-2.1.5_Sources.tar.gz/download"
          wget --user-agent="Wget" -O im.tar.gz "https://sourceforge.net/projects/imtoolkit/files/${{ env.IM_VERSION }}/Docs%20and%20Sources/im-${{ env.IM_VERSION }}_Sources.tar.gz/download"
          wget --user-agent="Wget" -O cd.tar.gz "https://sourceforge.net/projects/canvasdraw/files/${{ env.CD_VERSION }}/Docs%20and%20Sources/cd-${{ env.CD_VERSION }}_Sources.tar.gz/download"
          wget --user-agent="Wget" -O iup.tar.gz "https://sourceforge.net/projects/iup/files/${{ env.IUP_VERSION }}/Docs%20and%20Sources/iup-${{ env.IUP_VERSION }}_Sources.tar.gz/download"

      - name: Extract all sources
        run: |
          cd /d/build
          tar -xzf zlib.tar.gz
          tar -xzf freetype.tar.gz
          tar -xzf ftgl.tar.gz
          tar -xzf im.tar.gz
          tar -xzf cd.tar.gz
          tar -xzf iup.tar.gz
          ls -la

      - name: Patch Tecmake files for MSYS2
        run: |
          cd /d/build
          find . -name "tecmakewin.mak" -exec sed -i \
            -e 's|x:/lng/mingw4_64|/mingw64|g' \
            -e 's|x:/lng/dllw4_64|/mingw64|g' \
            -e 's|\$\(TEC_TOOLCHAIN\)gcc|gcc|g' \
            -e 's|\$\(TEC_TOOLCHAIN\)g++|g++|g' \
            -e 's|\$\(TEC_TOOLCHAIN\)ar|ar|g' \
            -e 's|\$\(TEC_TOOLCHAIN\)ranlib|ranlib|g' \
            {} \;
          echo "Tecmake files patched for MSYS2"

      - name: Build zlib
        run: |
          export TEC_UNAME=dllw4_64
          export TEC_TOOLCHAIN=""
          export USE_LUA_VERSION=54
          export NO_DEPEND=Yes
          export TECTOOLS_HOME=/d/build
          cd /d/build/zlib/src
          make

          ls ../lib/dllw4_64
          ls ..
          pwd

          cd ../..

      - name: Build freetype
        run: |
          export TEC_UNAME=dllw4_64
          export TEC_TOOLCHAIN=""
          export NO_DEPEND=Yes
          cd /d/build/freetype/src
          make

          ls ../lib/dllw4_64
          ls ..
          pwd

          cd ../..

      - name: Build ftgl
        run: |
          export TEC_UNAME=dllw4_64
          export TEC_TOOLCHAIN=""
          export NO_DEPEND=Yes
          cd /d/build/ftgl/src
          make

          ls ../lib/dllw4_64
          ls ..
          pwd

          cd ../..

      - name: Build IM
        run: |
          export TEC_UNAME=dllw4_64
          export TEC_TOOLCHAIN=""
          export USE_LUA_VERSION=54
          export NO_DEPEND=Yes
          export TECTOOLS_HOME=/d/build
          export LUA_INC=/d/build/lua54/install/include
          export LUA_LIB=/d/build/lua54/install/lib
          export LUA_BIN=/d/build/lua54/install/bin

          # Build core IM libraries
          cd /d/build/im/src
          # make im im_process im_jp2 im_avi
          make im im_jp2 im_process im_process_omp im_avi

          if [ ! -f ../lib/dllw4_64/im.dll ]; then
            echo "ERROR: Core IM DLL failed to build"
            exit 1
          fi
          echo "Core IM DLL built successfully"

          # Build Lua bindings
          echo "=== Building Lua bindings ==="
          make imlua5 imlua_process5 imlua_jp25 imlua_process_omp5 imlua_avi5

          if [ $? -ne 0 ]; then
            echo "ERROR: Lua bindings build failed"
            exit 1
          fi

          ls ../lib/dllw4_64
          ls ..
          pwd

          echo "IM Lua bindings built successfully"
          cd /d/build

      - name: Build CD
        run: |
          export TEC_UNAME=dllw4_64
          export TEC_TOOLCHAIN=""
          export USE_LUA_VERSION=54
          export NO_DEPEND=Yes
          export TECTOOLS_HOME=/d/build
          export LUA_INC=/d/build/lua54/install/include
          export LUA_LIB=/d/build/lua54/install/lib
          export LUA_BIN=/d/build/lua54/install/bin
          export FLAGS="-Wno-error=incompatible-pointer-types"

          cd /d/build/cd/src

          # Build core CD modules (excluding cdpdf which requires pdflib)
          echo "=== Building CD core libraries ==="
          make cd cdgl cdim cdcontextplus

          if [ ! -f ../lib/dllw4_64/cd.dll ]; then
            echo "ERROR: Core CD DLL failed to build"
            exit 1
          fi
          echo "Core CD libraries built successfully"

          # Build CD Lua bindings (excluding cdluapdf5 which requires pdflib)
          echo "=== Building CD Lua bindings ==="
          make cdlua5 cdluagl5 cdluaim5 cdluacontextplus5

          if [ $? -ne 0 ]; then
            echo "ERROR: CD Lua bindings build failed"
            exit 1
          fi

          ls ../lib/dllw4_64
          ls ..
          pwd

          echo "CD Lua bindings built successfully"
          cd /d/build

      - name: Build IUP
        run: |
          export TEC_UNAME=dllw4_64
          export TEC_TOOLCHAIN=""
          export USE_LUA_VERSION=54
          export NO_DEPEND=Yes
          export TECTOOLS_HOME=/d/build
          export LUA_INC=/d/build/lua54/install/include
          export LUA_LIB=/d/build/lua54/install/lib
          export LUA_BIN=/d/build/lua54/install/bin
          export FLAGS="-Wno-error=incompatible-pointer-types"
          
          cd /d/build/iup
          
          # Build core IUP libraries
          make iup iupcd iupcontrols iupgl iupglcontrols iup_plot iup_scintilla iupim iupimglib iupole
          
          # Build iupstub with mingw4_64 (static)
          cd src
          TEC_UNAME=mingw4_64 make -f ../tecmakewin.mak MF=iupstub
          mkdir -p ../lib/dllw4_64
          mv ../lib/mingw4_64/libiupstub.a ../lib/dllw4_64/
          cd ..
          
          # Build Lua bindings
          make -C srclua5 -k || true
          
          # Build iuplua console
          make iupluaconsole
          
          if [ ! -f lib/dllw4_64/iup.dll ]; then
            echo "ERROR: Core IUP DLL failed"
            exit 1
          fi
          
          find . -name "*.exe"
          cd /d/build

      - name: Verify Build Results
        run: |
          echo "=== Checking built libraries ==="
          echo "--- IUP DLLs ---"
          find /d/build/iup/lib/dllw4_64 -name "*.dll" 2>/dev/null | head -20
          echo "--- CD DLLs ---"
          find /d/build/cd/lib/dllw4_64 -name "*.dll" 2>/dev/null | head -20
          echo "--- IM DLLs ---"
          find /d/build/im/lib/dllw4_64 -name "*.dll" 2>/dev/null | head -20

      - name: Set padded build number
        run: |
          echo "PADDED_BUILD=$(printf '%04d' ${{ github.run_number }})" >> $GITHUB_ENV

      - name: Package Results
        run: |
          mkdir -p /d/dist/{lib,include,bin}

          echo "Copying Lua..."
          cp -r /d/build/lua54/install/* /d/dist/

          echo "Copying IUP executables..."
          find /d/build/iup/bin -name "*.exe" -exec cp -v {} /d/dist/bin/ \;

          echo "Copying IUP DLLs and import libraries..."
          find /d/build/iup/lib/dllw4_64 -type f \( -name "*.dll" -o -name "*.a" \) -exec cp -v {} /d/dist/bin/ \;

          echo "Copying CD DLLs and import libraries..."
          find /d/build/cd/lib/dllw4_64 -type f \( -name "*.dll" -o -name "*.a" \) -exec cp -v {} /d/dist/bin/ \;

          echo "Copying IM DLLs and import libraries..."
          find /d/build/im/lib/dllw4_64 -type f \( -name "*.dll" -o -name "*.a" \) -exec cp -v {} /d/dist/bin/ \;

          echo "Copying headers..."
          cp -r /d/build/iup/include/* /d/dist/include/ 2>/dev/null || true
          cp -r /d/build/cd/include/* /d/dist/include/ 2>/dev/null || true
          cp -r /d/build/im/include/* /d/dist/include/ 2>/dev/null || true

          echo "=== Package contents ==="
          echo "Executables:"
          ls -lah /d/dist/bin/*.exe 2>/dev/null
          echo "DLLs:"
          ls -lah /d/dist/bin/*.dll 2>/dev/null | head -30
          echo "Import libraries:"
          ls -lah /d/dist/bin/*.a 2>/dev/null | head -10

          echo "Renaming DLLs to remove version suffix..."
          cd /d/dist/bin
          for dll in *lua54.dll; do
            newname="${dll//54/}"
            cp -v "$dll" "$newname"
          done
          for a in *lua54.a; do
            newname="${a//54/}"
            cp -v "$a" "$newname"
          done

          # Create tar.gz in GitHub workspace
          cd $GITHUB_WORKSPACE
          tar -czf iup-cd-im-lua-${{ env.IUP_VERSION }}-build${{ env.PADDED_BUILD }}-win64-dll.tar.gz -C /d dist/
          ls -lh *.tar.gz

      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: iup-cd-im-lua-${{ env.IUP_VERSION }}-build${{ env.PADDED_BUILD }}-win64-dll
          path: iup-cd-im-lua-${{ env.IUP_VERSION }}-build${{ env.PADDED_BUILD }}-win64-dll.tar.gz

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: iup-cd-im-lua-${{ env.IUP_VERSION }}-build${{ env.PADDED_BUILD }}-win64-dll.tar.gz
          tag_name: ${{ env.IUP_VERSION }}-build-${{ env.PADDED_BUILD }}
          name: IUP/CD/IM ${{ env.IUP_VERSION }} Build ${{ env.PADDED_BUILD }} (DLL)
          body: |
            Automated build of IUP/CD/IM ${{ env.IUP_VERSION }} with Lua ${{ env.LUA_VERSION }} for Windows x64 (DLL version)

            Includes:
            - IUP ${{ env.IUP_VERSION }} (DLL)
            - CD ${{ env.CD_VERSION }} (DLL)
            - IM ${{ env.IM_VERSION }} (DLL)
            - Lua ${{ env.LUA_VERSION }}
            - iuplua.exe (Lua interpreter with IUP)
            - All dependencies (zlib, freetype, ftgl)
            - Lua bindings for IUP, CD, IM

            Executables and DLLs are in the bin/ directory
            Headers are in the include/ directory

            Built with MinGW-w64 on MSYS2
            Build number: ${{ env.PADDED_BUILD }}
            Commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}